truth <- as.data.frame(cbind(Sim.obj$diff.otu.ind, Sim.obj$otu.names)) %>% dplyr::rename(diff.otu.ind = V1, otu.id = V2)
##-- prevelance filtered otu.tab
otu.tab.sim <- t(t(otu.tab.sim) / colSums(otu.tab.sim))
otu.tab.sim <- otu.tab.sim[rowSums(otu.tab.sim > 0) / (ncol(otu.tab.sim)) > 0.10,]
# new otu tab names
ind <- rownames(otu.tab.sim)
comm <- Sim.obj$otu.tab.sim[ind,]
comm <- comm[,rownames(meta.dat)]
gmpr.size.factor <- GMPR(comm) # rownames are OTUs and colnames are sampleIDs
comm.norm <- t(t(comm) / gmpr.size.factor)
# truth of filtered OTUs
truth <- truth %>% filter(otu.id %in% ind)
W <- wrench(comm, condition=covariates)
compositionalFactors <- W$ccf
normalizationFactors <- W$nf
dat <- list(counts = comm, compositionalFactors= compositionalFactors, normalizationFactors = normalizationFactors, comm.norm = comm.norm, gmpr.size.factor = gmpr.size.factor, covariates = covariates, meta.dat = meta.dat)
fdr <- tpr <- fp <- res_seq <- NA
wrapper <- match.fun(methods_funs[[method]])
tryCatch({
cat(paste(method, '\n'))
wrapper.obj <- wrapper(dat, truth, meta.dat)
fdr <- wrapper.obj$fdr
tpr <- wrapper.obj$tpr
fp <- wrapper.obj$fp
res_seq <- wrapper.obj$res
res[depth.mu, diff.otu.mode, model, nSub, nOTU, covariate.type, depth.conf.factor, diff.otu.direct, confounder.type, nSam, covariate.eff.mean, diff.otu.pct,'TPR', method] <- tpr
res[depth.mu, diff.otu.mode, model, nSub, nOTU, covariate.type, depth.conf.factor, diff.otu.direct, confounder.type, nSam, covariate.eff.mean, diff.otu.pct, 'FDR', method] <-  fdr
# sum.list[[paste0(depth.mu, diff.otu.mode, outlier.prop, zinfl.otu.pct, nOTU, covariate.type, depth.conf.factor, diff.otu.direct, confounder.type, nSam, covariate.eff.mean, diff.otu.pct)]] <- res_seq
}, error =function(e){cat(paste0(paste0(depth.mu, diff.otu.mode, model, nSub, nOTU, covariate.type, depth.conf.factor, diff.otu.direct, confounder.type, nSam, covariate.eff.mean, diff.otu.pct), method, ' ERROR : '),conditionMessage(e), "\n")})
}
}
}
}
}
}
}
}
}
}
}
}
warnings()
cat('\n', date(), '\n', method,'Finished!')
sink()
# save(sum.list,file=file.path(resdir, paste(prefix, "_sum",  part, '-', method, ".Rdata", sep="")))
save(res, file=file.path(resdir, paste(prefix, "_res",  part, '-', method, ".Rdata", sep="")))
return(res)
}
# prefix <- 'M7'
# resdir <-  file.path(paste0("/research/bsi/projects/staff_analysis/m216453/SemiSim/", prefix))
# source(file.path(paste0(resdir, "/Cluster_mayo.R")))
# temp <- load('Stool_V35.RData',envir=.GlobalEnv)
prefix <- 'M0'
resdir <-  file.path(paste0("~/Documents/Mayo_Research/SemiSimulation/", prefix))
temp <- load('~/Documents/Mayo_Research/DataLib/Stool_V35.RData',envir=.GlobalEnv)
temp1 <- load('~/Documents/Mayo_Research/DataLib/Stool_V35_dirmult.RData',envir=.GlobalEnv)
otu.tab <- Stool_V35
source(file.path(resdir, "SemiSim.R"))
source(file.path(resdir, "BBmix.R"))
source(file.path(resdir, "ZicoSeq.R"))
source(file.path(resdir, "zeroinfl.plus.daa.R"))
source(file.path(resdir, "zeroinfl.plus.github.R"))
source(file.path(resdir, "ancom_v2.1.R"))
source(file.path(resdir, "wrappers.R"))
source(file.path(resdir, "raida.R"))
pkg <- c('reshape','MASS','GMPR','readr','DESeq2', 'ALDEx2', 'metagenomeSeq', 'edgeR', 'GUniFrac', 'grDevices', 'dirmult', 'exactRankTests','nlme', 'dplyr', 'magrittr', 'tidyr', 'protoclust', 'ggplot2', 'compositions','rmutil','tibble','reticulate','dacomp','LDM','Wrench','RioNorm2')# ,'RAIDA'
lapply(pkg, require, character.only = TRUE)
rm(.Random.seed)
paras <- list()
paras$model.paras <- NULL
paras$resdir <- resdir
paras$prefix <- prefix
paras$methods <- c('Wilcox')#,'Rarefy', 'ZicoSeq', 'DESeq2', 'edgeR', 'MSeq2', 'Aldex2', 'Omnibus', 'ANCOM2', 'RAIDA','DACOMP', 'LDM','DESeq2.Wrench','DESeq2.gmpr','edgeR.gmpr', 'edgeR.Wrench','MSeq2.Wrench','RioNorm2')
paras$nOTUs = c('species')
paras$nSams = "medium"
paras$diff.otu.pcts= c('low')#, 'medium', 'high')
paras$diff.otu.modes = c('mix')#, 'abundant', 'rare')
paras$diff.otu.directs = c('balanced')
paras$covariate.types = c("binary")#"continuous")
paras$covariate.eff.means = 'medium'
paras$confounder.types = c('none')#, 'continuous', 'binary', 'both')
paras$depth.mus = 'medium'
paras$depth.conf.factors = c('none')#,'low','medium','high')
paras$include.top.otu = FALSE
paras$model = 'loglinear'
paras$nSub = 'nSub_L1'
res <- func(1, 2, paras)
res
nOTU = c('phylum')#,'genus','species')
nSam = c('low')#,'medium','high')
diff.otu.pct= c('low')#, 'medium', 'high')
diff.otu.mode = c('mix')#, 'abundant', 'rare')
diff.otu.direct = c('balanced')#,'unbalanced')
covariate.type = c("binary")#"continuous")
covariate.eff.mean = c('medium')
confounder.type = c('none')#, 'continuous', 'binary', 'both')
depth.mu = c('medium')#'low',,'high'
depth.conf.factor = c('none')#,'medium','high')
include.top.otu = c(FALSE)
model = 'loglinear'
nSub = 'Sub_L1'
otu.tab = Stool_V35
Sim.obj <- SimulateSeq(otu.tab,
nOTU = nOTU, nSam = nSam, diff.otu.pct = diff.otu.pct, diff.otu.direct = diff.otu.direct, diff.otu.mode = diff.otu.mode,
covariate.type = covariate.type, covariate.eff.mean = covariate.eff.mean, confounder.type = confounder.type, depth.mu =depth.mu, depth.conf.factor = depth.conf.factor,
model = model, nSub = nSub,include.top.otu = include.top.otu)
Sim.obj
##-- original simulated otu.tab
otu.tab.sim <- Sim.obj$otu.tab.sim;dim(otu.tab.sim)
# original two groups, prepare for meta data
meta.dat <- as.data.frame(Sim.obj$X) %>% mutate(grp = V1) %>% dplyr::select(-V1)
rownames(meta.dat) <- colnames(otu.tab.sim)
meta.dat = meta.dat %>% rownames_to_column('SampleID')
# reorder to let same group samples together
meta.dat <- meta.dat[order( -meta.dat$grp),]
rownames(meta.dat) <- NULL
meta.dat <- meta.dat %>% column_to_rownames('SampleID')
otu.tab.sim <- otu.tab.sim[, rownames(meta.dat)]
covariates <- factor(meta.dat$grp)
# truth of original OTUs
truth <- as.data.frame(cbind(Sim.obj$diff.otu.ind, Sim.obj$otu.names)) %>% dplyr::rename(diff.otu.ind = V1, otu.id = V2)
##-- prevelance filtered otu.tab
otu.tab.sim <- t(t(otu.tab.sim) / colSums(otu.tab.sim))
otu.tab.sim <- otu.tab.sim[rowSums(otu.tab.sim > 0) / (ncol(otu.tab.sim)) > 0.10,]
# new otu tab names
ind <- rownames(otu.tab.sim)
comm <- Sim.obj$otu.tab.sim[ind,]
comm <- comm[,rownames(meta.dat)]
gmpr.size.factor <- GMPR(comm) # rownames are OTUs and colnames are sampleIDs
comm.norm <- t(t(comm) / gmpr.size.factor)
# truth of filtered OTUs
truth <- truth %>% filter(otu.id %in% ind)
W <- wrench(comm, condition=covariates)
compositionalFactors <- W$ccf
normalizationFactors <- W$nf
dat <- list(counts = comm, compositionalFactors= compositionalFactors, normalizationFactors = normalizationFactors, comm.norm = comm.norm, gmpr.size.factor = gmpr.size.factor, covariates = covariates, meta.dat = meta.dat)
fdr <- tpr <- fp <- res_seq <- NA
method
method = 'Wilcox'
wrapper <- match.fun(methods_funs[[method]])
methods_funs <- list('Wilcox'='wilcox.wrapper' , 'ZicoSeq'= "ZicoSeq.wrapper", 'Rarefy'= "Rarefy.wrapper", 'Aldex2'= "Aldex2.wrapper", 'Omnibus'="Omnibus.wrapper",
'ANCOM2'="ANCOM2.wrapper", 'RAIDA'="RAIDA.wrapper", 'DACOMP' = "dacomp.wrapper", 'LDM'="ldm.wrapper", 'RioNorm2'="RioNorm.wrapper",
'DESeq2'="DESeq.wrapper", 'DESeq2.Wrench'="DESeq.Wrench.wrapper", 'DESeq2.gmpr'="DESeq.gmpr.wrapper",'edgeR'="edgeR.wrapper", 'edgeR.gmpr'="edgeR.gmpr.wrapper",
'edgeR.Wrench'="edgeR.Wrench.wrapper", 'MSeq2.Wrench'="metagenomeSeq2.Wrench.wrapper", 'MSeq2'="metagenomeSeq2.wrapper")
wrapper <- match.fun(methods_funs[[method]])
wrapper.obj <- wrapper(dat, truth, meta.dat)
fdr <- wrapper.obj$fdr
tpr <- wrapper.obj$tpr
fp <- wrapper.obj$fp
res_seq <- wrapper.obj$res
tpr
fdr
res <- array(NA, c(length(depth.mus), length(diff.otu.modes), length(models), length(nSubs), length(nOTUs), length(covariate.types), length(depth.conf.factors),
length(diff.otu.directs), length(confounder.types), length(nSams), length(covariate.eff.means), length(diff.otu.pcts),
length(measures), length(method)),
dimnames=list(depth.mus, diff.otu.modes, models, nSubs, nOTUs, covariate.types, depth.conf.factors,
diff.otu.directs, confounder.types, nSams, covariate.eff.means, diff.otu.pcts,
measures, method))
methods <- c('Wilcox')#,'Rarefy', 'ZicoSeq', 'DESeq2', 'edgeR', 'MSeq2', 'Aldex2', 'Omnibus', 'ANCOM2', 'RAIDA','DACOMP', 'LDM','DESeq2.Wrench','DESeq2.gmpr','edgeR.gmpr', 'edgeR.Wrench','MSeq2.Wrench','RioNorm2')
nOTUs = c('species')
nSams = "medium"
diff.otu.pcts= c('low')#, 'medium', 'high')
diff.otu.modes = c('mix')#, 'abundant', 'rare')
diff.otu.directs = c('balanced')
covariate.types = c("binary")#"continuous")
covariate.eff.means = 'medium'
confounder.types = c('none')#, 'continuous', 'binary', 'both')
depth.mus = 'medium'
depth.conf.factors = c('none')#,'low','medium','high')
include.top.otu = FALSE
model = 'loglinear'
nSub = 'nSub_L1'
res <- array(NA, c(length(depth.mus), length(diff.otu.modes), length(models), length(nSubs), length(nOTUs), length(covariate.types), length(depth.conf.factors),
length(diff.otu.directs), length(confounder.types), length(nSams), length(covariate.eff.means), length(diff.otu.pcts),
length(measures), length(method)),
dimnames=list(depth.mus, diff.otu.modes, models, nSubs, nOTUs, covariate.types, depth.conf.factors,
diff.otu.directs, confounder.types, nSams, covariate.eff.means, diff.otu.pcts,
measures, method))
models = 'loglinear'
nSub = 'nSub_L1'
res <- array(NA, c(length(depth.mus), length(diff.otu.modes), length(models), length(nSubs), length(nOTUs), length(covariate.types), length(depth.conf.factors),
length(diff.otu.directs), length(confounder.types), length(nSams), length(covariate.eff.means), length(diff.otu.pcts),
length(measures), length(method)),
dimnames=list(depth.mus, diff.otu.modes, models, nSubs, nOTUs, covariate.types, depth.conf.factors,
diff.otu.directs, confounder.types, nSams, covariate.eff.means, diff.otu.pcts,
measures, method))
measures <- c('TPR', 'FDR')
res <- array(NA, c(length(depth.mus), length(diff.otu.modes), length(models), length(nSubs), length(nOTUs), length(covariate.types), length(depth.conf.factors),
length(diff.otu.directs), length(confounder.types), length(nSams), length(covariate.eff.means), length(diff.otu.pcts),
length(measures), length(method)),
dimnames=list(depth.mus, diff.otu.modes, models, nSubs, nOTUs, covariate.types, depth.conf.factors,
diff.otu.directs, confounder.types, nSams, covariate.eff.means, diff.otu.pcts,
measures, method))
res
length(nSubs)
nSubs = 'nSub_L1'
res <- array(NA, c(length(depth.mus), length(diff.otu.modes), length(models), length(nSubs), length(nOTUs), length(covariate.types), length(depth.conf.factors),
length(diff.otu.directs), length(confounder.types), length(nSams), length(covariate.eff.means), length(diff.otu.pcts),
length(measures), length(method)),
dimnames=list(depth.mus, diff.otu.modes, models, nSubs, nOTUs, covariate.types, depth.conf.factors,
diff.otu.directs, confounder.types, nSams, covariate.eff.means, diff.otu.pcts,
measures, method))
res
res <- array(NA, c(length(depth.mus), length(diff.otu.modes), length(models), length(nSubs), length(nOTUs), length(covariate.types), length(depth.conf.factors),
length(diff.otu.directs), length(confounder.types), length(nSams), length(covariate.eff.means), length(diff.otu.pcts),
length(measures), length(method)),
dimnames=list(depth.mus, diff.otu.modes, models, nSubs, nOTUs, covariate.types, depth.conf.factors,
diff.otu.directs, confounder.types, nSams, covariate.eff.means, diff.otu.pcts,
measures, method))
res
for (diff.otu.pct in diff.otu.pcts) {
for (diff.otu.mode in diff.otu.modes) {
for (confounder.type in confounder.types) {
for (depth.conf.factor in depth.conf.factors){
for (covariate.type in covariate.types) {
for (nSam in nSams) {
for (nOTU in nOTUs) {
for (depth.mu in depth.mus) {
for (model in models){
for (nSub in nSubs){
for (covariate.eff.mean in covariate.eff.means){
for (diff.otu.direct in diff.otu.directs){
Sim.obj <- SimulateSeq(otu.tab,
nOTU = nOTU, nSam = nSam, diff.otu.pct = diff.otu.pct, diff.otu.direct = diff.otu.direct, diff.otu.mode = diff.otu.mode,
covariate.type = covariate.type, covariate.eff.mean = covariate.eff.mean, confounder.type = confounder.type, depth.mu =depth.mu, depth.conf.factor = depth.conf.factor,
model = model, nSub = nSub,include.top.otu = include.top.otu)
cat('finshed!!!!')
##-- original simulated otu.tab
otu.tab.sim <- Sim.obj$otu.tab.sim;dim(otu.tab.sim)
# original two groups, prepare for meta data
meta.dat <- as.data.frame(Sim.obj$X) %>% mutate(grp = V1) %>% dplyr::select(-V1)
rownames(meta.dat) <- colnames(otu.tab.sim)
meta.dat = meta.dat %>% rownames_to_column('SampleID')
# reorder to let same group samples together
meta.dat <- meta.dat[order( -meta.dat$grp),]
rownames(meta.dat) <- NULL
meta.dat <- meta.dat %>% column_to_rownames('SampleID')
otu.tab.sim <- otu.tab.sim[, rownames(meta.dat)]
covariates <- factor(meta.dat$grp)
# truth of original OTUs
truth <- as.data.frame(cbind(Sim.obj$diff.otu.ind, Sim.obj$otu.names)) %>% dplyr::rename(diff.otu.ind = V1, otu.id = V2)
##-- prevelance filtered otu.tab
otu.tab.sim <- t(t(otu.tab.sim) / colSums(otu.tab.sim))
otu.tab.sim <- otu.tab.sim[rowSums(otu.tab.sim > 0) / (ncol(otu.tab.sim)) > 0.10,]
# new otu tab names
ind <- rownames(otu.tab.sim)
comm <- Sim.obj$otu.tab.sim[ind,]
comm <- comm[,rownames(meta.dat)]
gmpr.size.factor <- GMPR(comm) # rownames are OTUs and colnames are sampleIDs
comm.norm <- t(t(comm) / gmpr.size.factor)
# truth of filtered OTUs
truth <- truth %>% filter(otu.id %in% ind)
W <- wrench(comm, condition=covariates)
compositionalFactors <- W$ccf
normalizationFactors <- W$nf
dat <- list(counts = comm, compositionalFactors= compositionalFactors, normalizationFactors = normalizationFactors, comm.norm = comm.norm, gmpr.size.factor = gmpr.size.factor, covariates = covariates, meta.dat = meta.dat)
fdr <- tpr <- fp <- res_seq <- NA
wrapper <- match.fun(methods_funs[[method]])
tryCatch({
cat(paste(method, '\n'))
wrapper.obj <- wrapper(dat, truth, meta.dat)
fdr <- wrapper.obj$fdr
tpr <- wrapper.obj$tpr
fp <- wrapper.obj$fp
res_seq <- wrapper.obj$res
res[depth.mu, diff.otu.mode, model, nSub, nOTU, covariate.type, depth.conf.factor, diff.otu.direct, confounder.type, nSam, covariate.eff.mean, diff.otu.pct,'TPR', method] <- tpr
res[depth.mu, diff.otu.mode, model, nSub, nOTU, covariate.type, depth.conf.factor, diff.otu.direct, confounder.type, nSam, covariate.eff.mean, diff.otu.pct, 'FDR', method] <-  fdr
# sum.list[[paste0(depth.mu, diff.otu.mode, outlier.prop, zinfl.otu.pct, nOTU, covariate.type, depth.conf.factor, diff.otu.direct, confounder.type, nSam, covariate.eff.mean, diff.otu.pct)]] <- res_seq
}, error =function(e){cat(paste0(paste0(depth.mu, diff.otu.mode, model, nSub, nOTU, covariate.type, depth.conf.factor, diff.otu.direct, confounder.type, nSam, covariate.eff.mean, diff.otu.pct), method, ' ERROR : '),conditionMessage(e), "\n")})
}
}
}
}
}
}
}
}
}
}
}
}
func <- function(part, method, paras) {
set.seed(part)
methods <- paras$methods
model.paras <- paras$model.paras
nSams <- paras$nSams
nOTUs <- paras$nOTUs
diff.otu.pcts <- paras$diff.otu.pcts
diff.otu.directs <- paras$diff.otu.directs
diff.otu.modes <- paras$diff.otu.modes
covariate.types <- paras$covariate.types
covariate.eff.means <- paras$covariate.eff.means
confounder.types <- paras$confounder.types
depth.mus <- paras$depth.mus
depth.conf.factors <- paras$depth.conf.factors
models <- paras$models
nSubs <- paras$nSubs
include.top.otu <- paras$include.top.otu
measures <- c('TPR', 'FDR')
resdir <- paras$resdir
prefix <- paras$prefix
resdir <- gsub('/$', '', resdir)
methods_funs <- list('Wilcox'='wilcox.wrapper' , 'ZicoSeq'= "ZicoSeq.wrapper", 'Rarefy'= "Rarefy.wrapper", 'Aldex2'= "Aldex2.wrapper", 'Omnibus'="Omnibus.wrapper",
'ANCOM2'="ANCOM2.wrapper", 'RAIDA'="RAIDA.wrapper", 'DACOMP' = "dacomp.wrapper", 'LDM'="ldm.wrapper", 'RioNorm2'="RioNorm.wrapper",
'DESeq2'="DESeq.wrapper", 'DESeq2.Wrench'="DESeq.Wrench.wrapper", 'DESeq2.gmpr'="DESeq.gmpr.wrapper",'edgeR'="edgeR.wrapper", 'edgeR.gmpr'="edgeR.gmpr.wrapper",
'edgeR.Wrench'="edgeR.Wrench.wrapper", 'MSeq2.Wrench'="metagenomeSeq2.Wrench.wrapper", 'MSeq2'="metagenomeSeq2.wrapper")
sum.list <- list()
# methods <- c('Wilcox')#,'Rarefy', 'ZicoSeq', 'DESeq2', 'edgeR', 'MSeq2', 'Aldex2', 'Omnibus', 'ANCOM2', 'RAIDA','DACOMP', 'LDM','DESeq2.Wrench','DESeq2.gmpr','edgeR.gmpr', 'edgeR.Wrench','MSeq2.Wrench','RioNorm2')
# nOTUs = c('species')
# nSams = "medium"
# diff.otu.pcts= c('low')#, 'medium', 'high')
# diff.otu.modes = c('mix')#, 'abundant', 'rare')
# diff.otu.directs = c('balanced')
# covariate.types = c("binary")#"continuous")
# covariate.eff.means = 'medium'
# confounder.types = c('none')#, 'continuous', 'binary', 'both')
# depth.mus = 'medium'
# depth.conf.factors = c('none')#,'low','medium','high')
# include.top.otu = FALSE
# models = 'loglinear'
# nSubs = 'nSub_L1'
res <- array(NA, c(length(depth.mus), length(diff.otu.modes), length(models), length(nSubs), length(nOTUs), length(covariate.types), length(depth.conf.factors),
length(diff.otu.directs), length(confounder.types), length(nSams), length(covariate.eff.means), length(diff.otu.pcts),
length(measures), length(method)),
dimnames=list(depth.mus, diff.otu.modes, models, nSubs, nOTUs, covariate.types, depth.conf.factors,
diff.otu.directs, confounder.types, nSams, covariate.eff.means, diff.otu.pcts,
measures, method))
sink(file.path(resdir, paste(prefix, "_",  part, '_',method,".log", sep="")))
cat(date(), '\n')
# nOTU = c('phylum')#,'genus','species')
# nSam = c('low')#,'medium','high')
# diff.otu.pct= c('low')#, 'medium', 'high')
# diff.otu.mode = c('mix')#, 'abundant', 'rare')
# diff.otu.direct = c('balanced')#,'unbalanced')
#
# covariate.type = c("binary")#"continuous")
# covariate.eff.mean = c('medium')
# confounder.type = c('none')#, 'continuous', 'binary', 'both')
# depth.mu = c('medium')#'low',,'high'
# depth.conf.factor = c('none')#,'medium','high')
#
# include.top.otu = c(FALSE)
# model = 'loglinear'
# nSub = 'Sub_L1'
# otu.tab = Stool_V35
for (diff.otu.pct in diff.otu.pcts) {
for (diff.otu.mode in diff.otu.modes) {
for (confounder.type in confounder.types) {
for (depth.conf.factor in depth.conf.factors){
for (covariate.type in covariate.types) {
for (nSam in nSams) {
for (nOTU in nOTUs) {
for (depth.mu in depth.mus) {
for (model in models){
for (nSub in nSubs){
for (covariate.eff.mean in covariate.eff.means){
for (diff.otu.direct in diff.otu.directs){
Sim.obj <- SimulateSeq(otu.tab,
nOTU = nOTU, nSam = nSam, diff.otu.pct = diff.otu.pct, diff.otu.direct = diff.otu.direct, diff.otu.mode = diff.otu.mode,
covariate.type = covariate.type, covariate.eff.mean = covariate.eff.mean, confounder.type = confounder.type, depth.mu =depth.mu, depth.conf.factor = depth.conf.factor,
model = model, nSub = nSub,include.top.otu = include.top.otu)
cat('finshed!!!!')
##-- original simulated otu.tab
otu.tab.sim <- Sim.obj$otu.tab.sim;dim(otu.tab.sim)
# original two groups, prepare for meta data
meta.dat <- as.data.frame(Sim.obj$X) %>% mutate(grp = V1) %>% dplyr::select(-V1)
rownames(meta.dat) <- colnames(otu.tab.sim)
meta.dat = meta.dat %>% rownames_to_column('SampleID')
# reorder to let same group samples together
meta.dat <- meta.dat[order( -meta.dat$grp),]
rownames(meta.dat) <- NULL
meta.dat <- meta.dat %>% column_to_rownames('SampleID')
otu.tab.sim <- otu.tab.sim[, rownames(meta.dat)]
covariates <- factor(meta.dat$grp)
# truth of original OTUs
truth <- as.data.frame(cbind(Sim.obj$diff.otu.ind, Sim.obj$otu.names)) %>% dplyr::rename(diff.otu.ind = V1, otu.id = V2)
##-- prevelance filtered otu.tab
otu.tab.sim <- t(t(otu.tab.sim) / colSums(otu.tab.sim))
otu.tab.sim <- otu.tab.sim[rowSums(otu.tab.sim > 0) / (ncol(otu.tab.sim)) > 0.10,]
# new otu tab names
ind <- rownames(otu.tab.sim)
comm <- Sim.obj$otu.tab.sim[ind,]
comm <- comm[,rownames(meta.dat)]
gmpr.size.factor <- GMPR(comm) # rownames are OTUs and colnames are sampleIDs
comm.norm <- t(t(comm) / gmpr.size.factor)
# truth of filtered OTUs
truth <- truth %>% filter(otu.id %in% ind)
W <- wrench(comm, condition=covariates)
compositionalFactors <- W$ccf
normalizationFactors <- W$nf
dat <- list(counts = comm, compositionalFactors= compositionalFactors, normalizationFactors = normalizationFactors, comm.norm = comm.norm, gmpr.size.factor = gmpr.size.factor, covariates = covariates, meta.dat = meta.dat)
fdr <- tpr <- fp <- res_seq <- NA
wrapper <- match.fun(methods_funs[[method]])
tryCatch({
cat(paste(method, '\n'))
wrapper.obj <- wrapper(dat, truth, meta.dat)
fdr <- wrapper.obj$fdr
tpr <- wrapper.obj$tpr
fp <- wrapper.obj$fp
res_seq <- wrapper.obj$res
res[depth.mu, diff.otu.mode, model, nSub, nOTU, covariate.type, depth.conf.factor, diff.otu.direct, confounder.type, nSam, covariate.eff.mean, diff.otu.pct,'TPR', method] <- tpr
res[depth.mu, diff.otu.mode, model, nSub, nOTU, covariate.type, depth.conf.factor, diff.otu.direct, confounder.type, nSam, covariate.eff.mean, diff.otu.pct, 'FDR', method] <-  fdr
# sum.list[[paste0(depth.mu, diff.otu.mode, outlier.prop, zinfl.otu.pct, nOTU, covariate.type, depth.conf.factor, diff.otu.direct, confounder.type, nSam, covariate.eff.mean, diff.otu.pct)]] <- res_seq
}, error =function(e){cat(paste0(paste0(depth.mu, diff.otu.mode, model, nSub, nOTU, covariate.type, depth.conf.factor, diff.otu.direct, confounder.type, nSam, covariate.eff.mean, diff.otu.pct), method, ' ERROR : '),conditionMessage(e), "\n")})
}
}
}
}
}
}
}
}
}
}
}
}
warnings()
cat('\n', date(), '\n', method,'Finished!')
sink()
# save(sum.list,file=file.path(resdir, paste(prefix, "_sum",  part, '-', method, ".Rdata", sep="")))
save(res, file=file.path(resdir, paste(prefix, "_res",  part, '-', method, ".Rdata", sep="")))
return(res)
}
# prefix <- 'M7'
# resdir <-  file.path(paste0("/research/bsi/projects/staff_analysis/m216453/SemiSim/", prefix))
# source(file.path(paste0(resdir, "/Cluster_mayo.R")))
# temp <- load('Stool_V35.RData',envir=.GlobalEnv)
prefix <- 'M0'
resdir <-  file.path(paste0("~/Documents/Mayo_Research/SemiSimulation/", prefix))
temp <- load('~/Documents/Mayo_Research/DataLib/Stool_V35.RData',envir=.GlobalEnv)
temp1 <- load('~/Documents/Mayo_Research/DataLib/Stool_V35_dirmult.RData',envir=.GlobalEnv)
otu.tab <- Stool_V35
source(file.path(resdir, "SemiSim.R"))
source(file.path(resdir, "BBmix.R"))
source(file.path(resdir, "ZicoSeq.R"))
source(file.path(resdir, "zeroinfl.plus.daa.R"))
source(file.path(resdir, "zeroinfl.plus.github.R"))
source(file.path(resdir, "ancom_v2.1.R"))
source(file.path(resdir, "wrappers.R"))
source(file.path(resdir, "raida.R"))
pkg <- c('reshape','MASS','GMPR','readr','DESeq2', 'ALDEx2', 'metagenomeSeq', 'edgeR', 'GUniFrac', 'grDevices', 'dirmult', 'exactRankTests','nlme', 'dplyr', 'magrittr', 'tidyr', 'protoclust', 'ggplot2', 'compositions','rmutil','tibble','reticulate','dacomp','LDM','Wrench','RioNorm2')# ,'RAIDA'
lapply(pkg, require, character.only = TRUE)
rm(.Random.seed)
paras <- list()
paras$model.paras <- NULL
paras$resdir <- resdir
paras$prefix <- prefix
paras$methods <- c('Wilcox')#,'Rarefy', 'ZicoSeq', 'DESeq2', 'edgeR', 'MSeq2', 'Aldex2', 'Omnibus', 'ANCOM2', 'RAIDA','DACOMP', 'LDM','DESeq2.Wrench','DESeq2.gmpr','edgeR.gmpr', 'edgeR.Wrench','MSeq2.Wrench','RioNorm2')
paras$nOTUs = c('species')
paras$nSams = "medium"
paras$diff.otu.pcts= c('low')#, 'medium', 'high')
paras$diff.otu.modes = c('mix')#, 'abundant', 'rare')
paras$diff.otu.directs = c('balanced')
paras$covariate.types = c("binary")#"continuous")
paras$covariate.eff.means = 'medium'
paras$confounder.types = c('none')#, 'continuous', 'binary', 'both')
paras$depth.mus = 'medium'
paras$depth.conf.factors = c('none')#,'low','medium','high')
paras$include.top.otu = FALSE
paras$models = 'loglinear'
paras$nSubs = 'nSub_L1'
res <- func(1, 2, paras)
rm(.Random.seed)
paras <- list()
paras$model.paras <- NULL
paras$resdir <- resdir
paras$prefix <- prefix
paras$methods <- c('Wilcox')#,'Rarefy', 'ZicoSeq', 'DESeq2', 'edgeR', 'MSeq2', 'Aldex2', 'Omnibus', 'ANCOM2', 'RAIDA','DACOMP', 'LDM','DESeq2.Wrench','DESeq2.gmpr','edgeR.gmpr', 'edgeR.Wrench','MSeq2.Wrench','RioNorm2')
paras$nOTUs = c('species')
paras$nSams = "medium"
paras$diff.otu.pcts= c('low')#, 'medium', 'high')
paras$diff.otu.modes = c('mix')#, 'abundant', 'rare')
paras$diff.otu.directs = c('balanced')
paras$covariate.types = c("binary")#"continuous")
paras$covariate.eff.means = 'medium'
paras$confounder.types = c('none')#, 'continuous', 'binary', 'both')
paras$depth.mus = 'medium'
paras$depth.conf.factors = c('none')#,'low','medium','high')
paras$include.top.otu = FALSE
paras$models = 'loglinear'
paras$nSubs = 'Sub_L1'
res <- func(1, 2, paras)
res
res <- array(NA, c(length(depth.mus), length(diff.otu.modes), length(models), length(nSubs), length(nOTUs), length(covariate.types), length(depth.conf.factors),
length(diff.otu.directs), length(confounder.types), length(nSams), length(covariate.eff.means), length(diff.otu.pcts),
length(measures), length(method)),
dimnames=list(depth.mus, diff.otu.modes, models, nSubs, nOTUs, covariate.types, depth.conf.factors,
diff.otu.directs, confounder.types, nSams, covariate.eff.means, diff.otu.pcts,
measures, method))
res
load('/Users/m216453/Dropbox/YangLu/2020_03_26_GroverProteaseHuman/2018_10_03_GroverPI-IBS/Data/data.wk.RData')
load('/Users/m216453/Dropbox/YangLu/2020_03_26_GroverProteaseHuman/2018_10_03_GroverPI-IBS/Data/data.wk.RData')
data.obj$abund.list$MEROPS
setwd('~/Dropbox/Workspace/MayoClinic/Collaboration/2018_10_03_GroverPI-IBS')
pkg = c('dplyr','tidyr','tibble','ggpubr','ggplot2','qvalue','reshape2','RColorBrewer','plyr')
lapply(pkg, require, character=T)
setwd('~/Dropbox/YangLu/2020_03_08_TSFDR/Submit/RealDataAnalysis/EWAS_Figure2def/')
remove.packages('tdfdr')
devtools::install_github("jchen1981/TDFDR/R_package")
library(tdfdr)
pkg = c('dplyr','tidyr','tibble','ggpubr','ggplot2','qvalue','reshape2','RColorBrewer','plyr')
lapply(pkg, require, character=T)
setwd('~/Dropbox/YangLu/2020_03_08_TSFDR/Submit/RealDataAnalysis/EWAS_Figure2def/')
########################  Data arrangement ########################
# =========== loading EWAS results of tsfdr and classic methods
files = list.files('Data/Step1', pattern = '*obj1.RDS')
qval.sum = pos.sum = data.frame()
files
file = files[1]
ewas = readRDS(paste0('Data/Step1/',file))
pos <- tdfdr.select(ewas, fdr.level = 0.05)$pos %>% as.data.frame() %>% rownames_to_column('id')
qval <- qvalue(ewas$p.value,fdr.level=0.05)$qvalue %>% as.data.frame() %>% rownames_to_column('id')
